---
interface Props {
  path: string;
}

const { path } = Astro.props;
---

<span 
  class="flex items-center gap-1 comment-count" 
  data-path={path}
>
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4">
    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
  </svg>
  <span class="count">0</span>
</span>

<script>
  async function fetchCommentCount(element: Element) {
    const path = element.getAttribute('data-path');
    if (!path) return;

    try {
      const response = await fetch(
        `https://giscus.app/api/discussions?repo=grayodesa/tg-comments&term=${encodeURIComponent(path)}`,
        {
          headers: {
            'Accept': 'application/json'
          },
          mode: 'cors',
          credentials: 'omit'
        }
      );

      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      
      const data = await response.json();
      const count = data.discussion?.totalCommentCount ?? 0;
      
      const countElement = element.querySelector('.count');
      if (countElement) {
        countElement.textContent = count.toString();
      }
    } catch (error) {
      console.error('Error fetching comment count:', error);
      // Keep the initial "0" value on error
    }
  }

  function initCommentCounts() {
    const elements = document.querySelectorAll('.comment-count');
    elements.forEach(fetchCommentCount);
  }

  // Initialize on both events to ensure it works in all scenarios
  document.addEventListener('astro:page-load', initCommentCounts);
  document.addEventListener('DOMContentLoaded', initCommentCounts);

  // Initial load for View Transitions
  initCommentCounts();
</script> 