---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from 'astro:assets';
import Container from "@components/Container.astro";
import PageLayout from "@layouts/PageLayout.astro";

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map((post) => {
    // Get the URL from frontmatter and remove leading/trailing slashes
    const urlPath = post.data.url?.replace(/^\/|\/$/g, '') || `posts/${post.slug}`;
    
    return {
      params: { slug: urlPath },
      props: { post },
    };
  });
}

type Props = {
  post: CollectionEntry<"posts">;
};

const { post } = Astro.props;
const { Content } = await post.render();
---

<PageLayout 
  title={post.data.title || ''} 
  description={post.data.description || ''}>
  <Container>
    <article class="post-card prose dark:prose-invert max-w-none">
      <div class="space-y-8">
        <div class="flex flex-wrap items-center gap-x-3 gap-y-2">
          <time datetime={post.data.date.toISOString()}>
            {post.data.date.toLocaleDateString("ru", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })}
          </time>
          {post.data.source && (
            <>
              <span>/</span>
              <a 
                href={post.data.source}
                class="hover:text-primary"
                target="_blank"
                rel="noopener noreferrer"
              >
                Source
              </a>
            </>
          )}
        </div>

        {/* Single image */}
        {post.data.images?.length === 1 && (
          <div class="single-image">
            <Image 
              src={post.data.images[0]}
              alt={post.data.title || ''}
              width={800}
              height={600}
              class="rounded-lg max-w-full h-auto cursor-pointer"
              onclick="openModal(this.src)"
            />
          </div>
        )}

        {/* Multiple images */}
        {post.data.images && post.data.images.length > 1 && (
          <div class="image-gallery grid grid-cols-2 md:grid-cols-3 gap-4">
            {post.data.images.map((image: string) => (
              <Image 
                src={image}
                alt={post.data.title || ''}
                width={400}
                height={300}
                class="rounded-lg w-full h-64 object-cover cursor-pointer"
                onclick="openModal(this.src)"
              />
            ))}
          </div>
        )}

        <div class="content">
          <Content />
        </div>
      </div>
    </article>

    {/* Modal for expanded images */}
    <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-75 hidden items-center justify-center z-50" onclick="closeModal()">
      <img id="modalImage" class="max-h-[90vh] max-w-[90vw] object-contain" src="" alt="Expanded view" />
    </div>

    <script is:inline>
      function openModal(imgSrc) {
        const modal = document.getElementById('imageModal');
        const modalImg = document.getElementById('modalImage');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        modalImg.src = imgSrc;
      }

      function closeModal() {
        const modal = document.getElementById('imageModal');
        modal.classList.remove('flex');
        modal.classList.add('hidden');
      }
    </script>
  </Container>
</PageLayout>

<style>
  .image-gallery img {
    transition: transform 0.2s;
  }
  
  .image-gallery img:hover {
    transform: scale(1.05);
  }
</style>