---
import { getCollection } from "astro:content";
import Container from "@components/Container.astro";
import PageLayout from "@layouts/PageLayout.astro";
import Link from "@components/Link.astro";
import { HOME } from "@consts";
import { Image } from 'astro:assets';
import CommentCount from '../components/CommentCount.astro';

export async function getStaticPaths({ paginate }: { paginate: any }) {
  const allPosts = await getCollection("posts");
  const filteredPosts = await Promise.all(
    allPosts
      .filter(post => !post.data.draft)
      .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
      .map(async (post) => {
        const rendered = await post.render();
        return { ...post, rendered };
      })
  );
    
  return paginate(filteredPosts, { 
    pageSize: 10,
    params: { page: (page: number) => page.toString() },
    // Start from page 2
    start: 2
  });
}

// Define interface for the page prop
interface PageProps {
  page: {
    data: any[];
    url: {
      prev: string | undefined;
      next: string | undefined;
    };
  };
}

// Add type to the prop destructuring
const { page } = Astro.props as PageProps;
---

<PageLayout title={HOME.TITLE} description={HOME.DESCRIPTION}>
  <Container>
    <section class="space-y-12">
      {page.data.map((post, index) => (
        <article class="post-card prose prose-slate max-w-none">
          {/* Single image */}
          {post.data.images?.length === 1 && (
            <div class="single-image mb-6">
              <Image 
                src={post.data.images[0]}
                alt={post.data.imageAlts?.[0] || post.data.title || ''}
                width={800}
                height={600}
                class="rounded-lg max-w-full h-auto cursor-pointer"
                onclick={`openModal('${post.data.images[0].src}')`}
              />
            </div>
          )}

          {/* Multiple images */}
          {post.data.images && post.data.images.length > 1 && (
            <div class="image-gallery mb-6 grid grid-cols-2 md:grid-cols-3 gap-4">
              {post.data.images.map((image: ImageMetadata, index: number) => (
                <Image 
                  src={image}
                  alt={`${post.data.title || 'Blog post'} - Image ${index + 1}`}
                  width={400}
                  height={300}
                  class="rounded-lg w-full h-64 object-cover cursor-pointer"
                  onclick={`openModal('${image.src}')`}
                />
              ))}
            </div>
          )}

          <div class="content">
            <post.rendered.Content />
          </div>
          
          <div class="metadata text-sm text-gray-600 flex gap-2 items-center">
            <a href={post.data.url || `/posts/${post.slug}`} class="hover:text-primary">
              {post.data.date && new Date(post.data.date).toLocaleDateString('ru', {
                year: 'numeric',
                month: 'long',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
              })}
            </a>
            {post.data.source && (
              <>
                <span>•</span>
                <a 
                  href={post.data.source}
                  class="hover:text-primary"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Source
                </a>
              </>
            )}
            <span>•</span>
            <CommentCount path={post.data.url?.replace(/^\/|\/$/g, '') || `posts/${post.slug}`} />
          </div>
        </article>
      ))}
      
      <nav class="flex justify-between items-center mt-8">
        {page.url.prev ? (
          <Link href={page.url.prev} class="hover:text-primary">
            Previous
          </Link>
        ) : (
          <span class="text-gray-400">Previous</span>
        )}
        {page.url.next ? (
          <Link href={page.url.next} class="hover:text-primary">
            Next
          </Link>
        ) : (
          <span class="text-gray-400">Next</span>
        )}
      </nav>
    </section>
  </Container>

  <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-75 hidden items-center justify-center z-50" onclick="closeModal()">
    <img id="modalImage" class="max-h-[90vh] max-w-[90vw] object-contain" src="" alt="Expanded view" />
  </div>

  <script is:inline>
    function openModal(imgSrc) {
      const modal = document.getElementById('imageModal');
      const modalImg = document.getElementById('modalImage');
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      const fullSizeUrl = imgSrc.split('?')[0];
      modalImg.src = fullSizeUrl;
    }

    function closeModal() {
      const modal = document.getElementById('imageModal');
      modal.classList.remove('flex');
      modal.classList.add('hidden');
    }
  </script>
</PageLayout>
--- 